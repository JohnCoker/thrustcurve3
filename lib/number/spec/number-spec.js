"use strict";

const number = require("../number");

describe("number", function() {
  it("isInt", function() {
    expect(number.isInt("")).toBe(false);
    expect(number.isInt("0")).toBe(true);
    expect(number.isInt("1000")).toBe(true);
    expect(number.isInt("-1")).toBe(true);
    expect(number.isInt("01")).toBe(true);
    expect(number.isInt("01.")).toBe(false);
    expect(number.isInt("1.")).toBe(false);
    expect(number.isInt("1.01")).toBe(false);
    expect(number.isInt("010")).toBe(true);
  });
  it("isNonNegInt", function() {
    expect(number.isNonNegInt("")).toBe(false);
    expect(number.isNonNegInt("0")).toBe(true);
    expect(number.isNonNegInt("1000")).toBe(true);
    expect(number.isNonNegInt("-1")).toBe(false);
    expect(number.isNonNegInt("01")).toBe(true);
    expect(number.isNonNegInt("01.")).toBe(false);
    expect(number.isNonNegInt("1.")).toBe(false);
    expect(number.isNonNegInt("1.01")).toBe(false);
    expect(number.isNonNegInt("010")).toBe(true);
  });
  it("isPosInt", function() {
    expect(number.isPosInt("")).toBe(false);
    expect(number.isPosInt("0")).toBe(false);
    expect(number.isPosInt("1000")).toBe(true);
    expect(number.isPosInt("-1")).toBe(false);
    expect(number.isPosInt("01")).toBe(true);
    expect(number.isPosInt("01.")).toBe(false);
    expect(number.isPosInt("1.")).toBe(false);
    expect(number.isPosInt("1.01")).toBe(false);
    expect(number.isPosInt("010")).toBe(true);
  });
  it("isNumber", function() {
    expect(number.isNumber("")).toBe(false);
    expect(number.isNumber("0")).toBe(true);
    expect(number.isNumber("1000")).toBe(true);
    expect(number.isNumber("-1")).toBe(true);
    expect(number.isNumber("01")).toBe(true);
    expect(number.isNumber("01.")).toBe(true);
    expect(number.isNumber("1.")).toBe(true);
    expect(number.isNumber("1.01")).toBe(true);
    expect(number.isNumber(".0")).toBe(true);
    expect(number.isNumber(".01")).toBe(true);
    expect(number.isNumber(".")).toBe(false);
    expect(number.isNumber("064.9091")).toBe(true);
  });
  it("parseNumber", function() {
    expect(number.parseNumber("")).toBeNaN();
    expect(number.parseNumber("0")).toBe(0);
    expect(number.parseNumber("1000")).toBe(1000);
    expect(number.parseNumber("-1")).toBe(-1);
    expect(number.parseNumber("01")).toBe(1);
    expect(number.parseNumber("01.")).toBe(1.0);
    expect(number.parseNumber("1.")).toBe(1.0);
    expect(number.parseNumber("1.01")).toBe(1.01);
    expect(number.parseNumber(".0")).toBe(0);
    expect(number.parseNumber(".01")).toBe(0.01);
    expect(number.parseNumber(".")).toBeNaN();
    expect(number.parseNumber("064.9091")).toBe(64.9091);
    expect(number.parseNumber(64.9091)).toBe(64.9091);
  });
  it("toFixed", function() {
    expect(number.toFixed(33)).toBe("33");
    expect(number.toFixed(33.4)).toBe("33");
    expect(number.toFixed(33.5)).toBe("34");
    expect(number.toFixed(33.6)).toBe("34");
    expect(number.toFixed(33.654321)).toBe("34");
    expect(number.toFixed(1.23e6)).toBe("1230000");
    expect(number.toFixed(33, 0)).toBe("33");
    expect(number.toFixed(33.4, 0)).toBe("33");
    expect(number.toFixed(33.5, 0)).toBe("34");
    expect(number.toFixed(33.6, 0)).toBe("34");
    expect(number.toFixed(33.654321, 0)).toBe("34");
    expect(number.toFixed(1.23e6)).toBe("1230000");
    expect(number.toFixed(33.0, 1)).toBe("33.0");
    expect(number.toFixed(33.44, 1)).toBe("33.4");
    expect(number.toFixed(33.55, 1)).toBe("33.6");
    expect(number.toFixed(33.61, 1)).toBe("33.6");
    expect(number.toFixed(33.66, 1)).toBe("33.7");
    expect(number.toFixed(33.654321, 1)).toBe("33.7");
    expect(number.toFixed(1.23e6, 1)).toBe("1230000.0");
    expect(number.toFixed(33, -1)).toBe("33");
    expect(number.toFixed(33.4, -1)).toBe("33.4");
    expect(number.toFixed(33.5, -1)).toBe("33.5");
    expect(number.toFixed(33.6, -1)).toBe("33.6");
    expect(number.toFixed(33.44, -1)).toBe("33.44");
    expect(number.toFixed(33.55, -1)).toBe("33.55");
    expect(number.toFixed(33.61, -1)).toBe("33.61");
    expect(number.toFixed(33.66, -1)).toBe("33.66");
    expect(number.toFixed(33.654321, -1)).toBe("33.65");
    expect(number.toFixed(1.23e6, -1)).toBe("1230000");
    expect(number.toFixed(0.1 + 0.2)).toBe("0");
    expect(number.toFixed(0.1 + 0.2, 0)).toBe("0");
    expect(number.toFixed(0.1 + 0.2, 1)).toBe("0.3");
    expect(number.toFixed(0.1 + 0.2, 2)).toBe("0.30");
    expect(number.toFixed(0.1 + 0.2, 3)).toBe("0.300");
    expect(number.toFixed(NaN)).toBe("");
    expect(number.toFixed(Infinity)).toBe("");
    expect(number.toFixed('x')).toBe("");
  });
});
