<h1>{{title}}</h1>

<style type="text/css">
table.endpoint {
  margin-bottom: 1em;
  border: 1px solid #69718c;
  border-left: 1em solid #69718c;
}
table.endpoint th {
  font-weight: normal;
  font-style: italic;
  padding: 2pt 1em;
}
table.endpoint th:after {
  content: " endpoint:";
}
table.endpoint td {
  font-family: Menlo,Monaco,Consolas,"Courier New",monospace;
  padding: 2pt 0.5em;
}
a.copy {
  margin: 0 0.5em;
}
</style>

<p>
This site provides a UI for searching for motors and downloading data right within any web browser.
However, for those intrepid souls who would like to integerate the data provided by this site into programs
(such as flight simulators), an API is provided.
<br/>
<i>Normal users of the site can just ignore this page.</i>
</p>

<p>
The API described on this page provides basic database access through REST endpoints.
Inputs can be specified as XML, JSON or form data and results can be returned as XML or JSON.
The v1 API, described on this page, is a superset of the XML-only API supported by the v2 site.
The "compatible endpoints" listed are those that were supported by the v2 site.
</p>

<p>
There are five actions supported, all of which use HTTP POST methods:
</p>
<ul>
<li><a href="#metadata">metadata</a>: get search criteria</li>
<li><a href="#search">search</a>: find matching motors</li>
<li><a href="#download">download</a>: retrieve simulator data files</li>
<li><a href="#getrockets">getrockets</a>: retrieve user's saved rockets</li>
<li><a href="#motorguide">motorguide</a>: find motors that work for a rocket</li>
</ul>

<p>
Each action supports three endpoints:
</p>
<ul>
<li>JSON: request is query string or JSON object, response is a JSON object
<li>XML: request is query string or XML element, response is an XML element
<li>compatible: request and response are XML elements (deprecated)
</ul>

<p>
The compatible endpoints are a legacy of the previous version of this site and have not changed (nor will they
change in future).
The XML endpoint is close to the compatible endpoint, but has some changes and will continue to evolve.
The JSON and XML endpoints are versioned and new versions may be introduced over time.
</p>

<p>
For those updating their code from the compatible (<code>/servlets</code>) to the newer (<code>/api/v1</code>)
endpoints, the main difference is that IDs are not integers. In the newer APIs they are longer hexadecimal numbers
instead of short integers, but if your code treats the IDs as strings, there is no real difference.
</p>

<p>
There is a <a href="/api/v1/swagger.json">OpenAPI (Swagger) spec</a> for the JSON API and you can use
<a class="url" href="https://swagger.io/tools/swagger-inspector/" target="_blank">Swagger Inspector</a>
to explore the API with it.
You can
<a href="https://app.swaggerhub.com/apis/JCSW7/thrust-curve_org_api/1.0.0" target="_blank">Browse the hosted documentation</a>
or point Swagger Insector (or similar OpenAPI tool) at <code>https://www.thrustcurve.org/api/v1/swagger.json</code>
or browse
</p>

<p>
Each API is described in its own section below. The JSON and XML endpoints support both GET and POST and the
compatible endpoints support only POST (and only XML).
</p>

<p>
For an example of using the API, see <a href="apidemo.html">the API demo page</a>.
</p>


<a name="metadata"></a>
<h2>Metadata</h2>

<table class="endpoint">
<tr><th>JSON</th><td class="url">/api/v1/metadata.json</td></tr>
<tr><th>XML</th><td class="url">/api/v1/metadata.xml</td></tr>
<tr><th>compatible</th><td class="url">/servlets/metadata</td></tr>
</table>

<p>
The metadata API doesn't return stats or data on individual motors, but instead is used to find out what actual criteria exist for doing a search.
</p>

<ul>
<li><a href="https://app.swaggerhub.com/apis/JCSW7/thrust-curve_org_api/1.0.0#/metadata" target="_blank">Swagger documentation for the JSON API</a></li>
<li><a href="/2014/metadata-request.xsd" target="_blank">XSD for the XML API request</a>
<li><a href="/2008/metadata-response.xsd" target="_blank">XSD for the XML API response</a>
</ul>

</p>
This is useful for building interactive programs that want to populate a set of combo boxes with valid search criteria,
without hard-coding the actual values into the program.
The simplest case is to return metadata encompasing all motors in the database using no input at all:
<a href="/api/v1/metadata.json">/api/v1/metadata.<b>json</b></a>
(or <a href="/api/v1/metadata.xml">metadata.<b>xml</b></a>).
</p>

<p>
However, its usually desirable to get metadata only for the motors that the user of the API is actually interested in.
For example, if you don't care about motors that are out of production, restricting the metadata to available motors
makes more sense:
<a href="/api/v1/metadata.json?availability=available">/api/v1/metadata.json?availability=available</a>.
This endpoint accepts the same query as the <b>search</b> endpoint below.
</p>


<a name="search"></a>
<h2>Search</h2>

<table class="endpoint">
<tr><th>JSON</th><td class="url">/api/v1/search.json</td></tr>
<tr><th>XML</th><td class="url">/api/v1/search.xml</td></tr>
<tr><th>compatible</th><td class="url">/servlets/search</td></tr>
</table>

<p>
The search API is where it starts to get more interesting. This is the first API that requires inputs and
returns data on specific motors in the the database. This API could be used to drive you own search front-end.
</p>

<ul>
<li><a href="https://app.swaggerhub.com/apis/JCSW7/thrust-curve_org_api/1.0.0#/search" target="_blank">Swagger documentation for the JSON API</a></li>
<li><a href="/2014/search-request.xsd" target="_blank">XSD for the XML API request</a>
<li><a href="/2020/search-response.xsd" target="_blank">XSD for the XML API response</a>
</ul>

<p>
Search is useful for finding motors that match one or more criteria.
You can specify a wide range of filters and retrieve all the data on the motors that match.
Among other data is the unique ID of the motor which can be used to download data files.
</p>


<a name="download"></a>
<h2>Download</h2>

<table class="endpoint">
<tr><th>JSON</th><td class="url">/api/v1/download.json</td></tr>
<tr><th>XML</th><td class="url">/api/v1/download.xml</td></tr>
<tr><th>compatible</th><td class="url">/servlets/download</td></tr>
</table>

<p>
The download API is used to pull data files for motors you've previously found via search.
The request specifies one or more motors and may also specify criteria for the simulator files.
</p>

<ul>
<li><a href="https://app.swaggerhub.com/apis/JCSW7/thrust-curve_org_api/1.0.0#/download" target="_blank">Swagger documentation for the JSON API</a></li>
<li><a href="/2020/download-request.xsd" target="_blank">XSD for the XML API request</a>
<li><a href="/2020/download-response.xsd" target="_blank">XSD for the XML API response</a>
</ul>

<p>
Download is useful for retrieving the simulator data files uploaded to ThrustCurve.org.
Once you have one or more motors found via search (above), you can use download to get their data files.
You can specify a few criteria for the data files as well, such as the format.
</p>

<p>
There is also a feature to access the parsed data points in a standard format if you want to consume the data
directly. In the request, specify <code>data=samples</code> to get the parsed data points instead of the file.
</p>


<a name="getrockets"></a>
<h2>Get Rockets</h2>


<a name="motorguide"></a>
<h2>Motor Guide</h2>



<textarea id="copy" style="width: 0; height: 0; border: none; outline: none; margin: 0; resize: none;"></textarea>
<script type="text/javascript">
$(document).ready(function() {
  try {
    if (!document.queryCommandSupported('copy'))
      return;
  } catch (e) {
    return;
  }

  $('table.endpoint td.url').each(function(i, td) {
    let path = td.innerText;
    let link = $('<a class="copy" href="#" title="copy URL"><i class="fa fa-copy"/></a>');
    link.on('click', function(e) {
      e.preventDefault();
      let textarea = document.querySelector('#copy');
      $(textarea).val('https://www.thrustcurve.org' + path);
      textarea.focus();
      textarea.select();
      document.execCommand('copy');
    });
    link.appendTo(td);
  });
});
</script>
